// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc/trackgroup/service.proto

package trackgroup

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"
import track "user-api/rpc/track"
import _ "user-api/rpc/user"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TrackGroup_Type int32

const (
	TrackGroup_lp       TrackGroup_Type = 0
	TrackGroup_ep       TrackGroup_Type = 1
	TrackGroup_single   TrackGroup_Type = 2
	TrackGroup_playlist TrackGroup_Type = 3
)

var TrackGroup_Type_name = map[int32]string{
	0: "lp",
	1: "ep",
	2: "single",
	3: "playlist",
}
var TrackGroup_Type_value = map[string]int32{
	"lp":       0,
	"ep":       1,
	"single":   2,
	"playlist": 3,
}

func (x TrackGroup_Type) String() string {
	return proto.EnumName(TrackGroup_Type_name, int32(x))
}
func (TrackGroup_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_service_6d4f429da37d98e6, []int{0, 0}
}

type TrackGroup struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title                string               `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Cover                []byte               `protobuf:"bytes,3,opt,name=cover,proto3" json:"cover,omitempty"`
	ReleaseDate          *timestamp.Timestamp `protobuf:"bytes,4,opt,name=release_date,json=releaseDate" json:"release_date,omitempty"`
	Type                 TrackGroup_Type      `protobuf:"varint,5,opt,name=type,enum=resonate.api.user.TrackGroup_Type" json:"type,omitempty"`
	DisplayArtist        string               `protobuf:"bytes,6,opt,name=display_artist,json=displayArtist" json:"display_artist,omitempty"`
	MultipleComposers    bool                 `protobuf:"varint,7,opt,name=multiple_composers,json=multipleComposers" json:"multiple_composers,omitempty"`
	CreatorId            string               `protobuf:"bytes,8,opt,name=creator_id,json=creatorId" json:"creator_id,omitempty"`
	UserGroupId          string               `protobuf:"bytes,9,opt,name=user_group_id,json=userGroupId" json:"user_group_id,omitempty"`
	LabelId              string               `protobuf:"bytes,10,opt,name=label_id,json=labelId" json:"label_id,omitempty"`
	Tracks               []*track.Track       `protobuf:"bytes,11,rep,name=tracks" json:"tracks,omitempty"`
	Tags                 []*track.Tag         `protobuf:"bytes,12,rep,name=tags" json:"tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TrackGroup) Reset()         { *m = TrackGroup{} }
func (m *TrackGroup) String() string { return proto.CompactTextString(m) }
func (*TrackGroup) ProtoMessage()    {}
func (*TrackGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_6d4f429da37d98e6, []int{0}
}
func (m *TrackGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrackGroup.Unmarshal(m, b)
}
func (m *TrackGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrackGroup.Marshal(b, m, deterministic)
}
func (dst *TrackGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackGroup.Merge(dst, src)
}
func (m *TrackGroup) XXX_Size() int {
	return xxx_messageInfo_TrackGroup.Size(m)
}
func (m *TrackGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackGroup.DiscardUnknown(m)
}

var xxx_messageInfo_TrackGroup proto.InternalMessageInfo

func (m *TrackGroup) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TrackGroup) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *TrackGroup) GetCover() []byte {
	if m != nil {
		return m.Cover
	}
	return nil
}

func (m *TrackGroup) GetReleaseDate() *timestamp.Timestamp {
	if m != nil {
		return m.ReleaseDate
	}
	return nil
}

func (m *TrackGroup) GetType() TrackGroup_Type {
	if m != nil {
		return m.Type
	}
	return TrackGroup_lp
}

func (m *TrackGroup) GetDisplayArtist() string {
	if m != nil {
		return m.DisplayArtist
	}
	return ""
}

func (m *TrackGroup) GetMultipleComposers() bool {
	if m != nil {
		return m.MultipleComposers
	}
	return false
}

func (m *TrackGroup) GetCreatorId() string {
	if m != nil {
		return m.CreatorId
	}
	return ""
}

func (m *TrackGroup) GetUserGroupId() string {
	if m != nil {
		return m.UserGroupId
	}
	return ""
}

func (m *TrackGroup) GetLabelId() string {
	if m != nil {
		return m.LabelId
	}
	return ""
}

func (m *TrackGroup) GetTracks() []*track.Track {
	if m != nil {
		return m.Tracks
	}
	return nil
}

func (m *TrackGroup) GetTags() []*track.Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type TracksToTrackGroup struct {
	TrackGroupId         string         `protobuf:"bytes,1,opt,name=track_group_id,json=trackGroupId" json:"track_group_id,omitempty"`
	Tracks               []*track.Track `protobuf:"bytes,2,rep,name=tracks" json:"tracks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *TracksToTrackGroup) Reset()         { *m = TracksToTrackGroup{} }
func (m *TracksToTrackGroup) String() string { return proto.CompactTextString(m) }
func (*TracksToTrackGroup) ProtoMessage()    {}
func (*TracksToTrackGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_6d4f429da37d98e6, []int{1}
}
func (m *TracksToTrackGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TracksToTrackGroup.Unmarshal(m, b)
}
func (m *TracksToTrackGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TracksToTrackGroup.Marshal(b, m, deterministic)
}
func (dst *TracksToTrackGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracksToTrackGroup.Merge(dst, src)
}
func (m *TracksToTrackGroup) XXX_Size() int {
	return xxx_messageInfo_TracksToTrackGroup.Size(m)
}
func (m *TracksToTrackGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_TracksToTrackGroup.DiscardUnknown(m)
}

var xxx_messageInfo_TracksToTrackGroup proto.InternalMessageInfo

func (m *TracksToTrackGroup) GetTrackGroupId() string {
	if m != nil {
		return m.TrackGroupId
	}
	return ""
}

func (m *TracksToTrackGroup) GetTracks() []*track.Track {
	if m != nil {
		return m.Tracks
	}
	return nil
}

func init() {
	proto.RegisterType((*TrackGroup)(nil), "resonate.api.user.TrackGroup")
	proto.RegisterType((*TracksToTrackGroup)(nil), "resonate.api.user.TracksToTrackGroup")
	proto.RegisterEnum("resonate.api.user.TrackGroup_Type", TrackGroup_Type_name, TrackGroup_Type_value)
}

func init() {
	proto.RegisterFile("rpc/trackgroup/service.proto", fileDescriptor_service_6d4f429da37d98e6)
}

var fileDescriptor_service_6d4f429da37d98e6 = []byte{
	// 544 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xd1, 0x6b, 0x13, 0x4f,
	0x10, 0xc7, 0x7f, 0x77, 0xbd, 0xa6, 0xe9, 0xe4, 0x1a, 0xae, 0xcb, 0x4f, 0x39, 0x0f, 0x4b, 0x8f,
	0x60, 0xe1, 0x10, 0x7a, 0x29, 0x11, 0x7c, 0xf3, 0xa1, 0xb6, 0x5a, 0x8a, 0x08, 0x72, 0x46, 0x10,
	0x41, 0xc2, 0xf6, 0x6e, 0x3c, 0x16, 0xf7, 0xba, 0xcb, 0xee, 0xa6, 0x90, 0x67, 0x1f, 0xfc, 0xb7,
	0x65, 0xf7, 0x12, 0xd3, 0x60, 0x1a, 0x14, 0xf2, 0x14, 0x66, 0xe6, 0x93, 0xef, 0x7c, 0x67, 0x76,
	0x38, 0x78, 0xaa, 0x64, 0x39, 0x34, 0x8a, 0x96, 0xdf, 0x6b, 0x25, 0xa6, 0x72, 0xa8, 0x51, 0xdd,
	0xb1, 0x12, 0x73, 0xa9, 0x84, 0x11, 0xe4, 0x50, 0xa1, 0x16, 0xb7, 0xd4, 0x60, 0x4e, 0x25, 0xcb,
	0xa7, 0x1a, 0x55, 0x72, 0x5c, 0x0b, 0x51, 0x73, 0x1c, 0x3a, 0xe0, 0x66, 0xfa, 0x6d, 0x68, 0x58,
	0x83, 0xda, 0xd0, 0x46, 0xb6, 0xff, 0x49, 0x8e, 0x2d, 0x76, 0x4a, 0x25, 0x1b, 0x5a, 0x69, 0x1b,
	0xac, 0x8a, 0x26, 0xe9, 0x0a, 0xe0, 0x7a, 0xaf, 0x12, 0x83, 0x1f, 0x01, 0xc0, 0xd8, 0xe6, 0xaf,
	0xac, 0x27, 0xd2, 0x07, 0x9f, 0x55, 0xb1, 0x97, 0x7a, 0xd9, 0x7e, 0xe1, 0xb3, 0x8a, 0xfc, 0x0f,
	0xbb, 0x86, 0x19, 0x8e, 0xb1, 0xef, 0x52, 0x6d, 0x60, 0xb3, 0xa5, 0xb8, 0x43, 0x15, 0xef, 0xa4,
	0x5e, 0x16, 0x16, 0x6d, 0x40, 0x5e, 0x41, 0xa8, 0x90, 0x23, 0xd5, 0x38, 0xa9, 0xa8, 0xc1, 0x38,
	0x48, 0xbd, 0xac, 0x37, 0x4a, 0xf2, 0x76, 0x8a, 0x7c, 0x31, 0x45, 0x3e, 0x5e, 0x4c, 0x51, 0xf4,
	0xe6, 0xfc, 0x25, 0x35, 0x48, 0x5e, 0x42, 0x60, 0x66, 0x12, 0xe3, 0xdd, 0xd4, 0xcb, 0xfa, 0xa3,
	0x41, 0xfe, 0xc7, 0x3e, 0xf2, 0xa5, 0xcf, 0x7c, 0x3c, 0x93, 0x58, 0x38, 0x9e, 0x9c, 0x40, 0xbf,
	0x62, 0x5a, 0x72, 0x3a, 0x9b, 0x50, 0x65, 0x98, 0x36, 0x71, 0xc7, 0x79, 0x3d, 0x98, 0x67, 0xcf,
	0x5d, 0x92, 0x9c, 0x02, 0x69, 0xa6, 0xdc, 0x30, 0xc9, 0x71, 0x52, 0x8a, 0x46, 0x0a, 0x8d, 0x4a,
	0xc7, 0x7b, 0xa9, 0x97, 0x75, 0x8b, 0xc3, 0x45, 0xe5, 0x62, 0x51, 0x20, 0x47, 0x00, 0xa5, 0x42,
	0x6a, 0x84, 0x9a, 0xb0, 0x2a, 0xee, 0x3a, 0xc5, 0xfd, 0x79, 0xe6, 0xba, 0x22, 0x03, 0x38, 0xb0,
	0x96, 0x26, 0xee, 0x25, 0x2d, 0xb1, 0xef, 0x88, 0x9e, 0x4d, 0x3a, 0x87, 0xd7, 0x15, 0x79, 0x02,
	0x5d, 0x4e, 0x6f, 0x90, 0xdb, 0x32, 0xb8, 0xf2, 0x9e, 0x8b, 0xaf, 0x2b, 0x72, 0x06, 0x1d, 0xf7,
	0x18, 0x3a, 0xee, 0xa5, 0x3b, 0x59, 0x6f, 0x14, 0x3f, 0x34, 0x6d, 0x31, 0xe7, 0xc8, 0x73, 0x08,
	0x0c, 0xad, 0x75, 0x1c, 0x3a, 0xfe, 0xf1, 0x3a, 0x9e, 0xd6, 0x85, 0x63, 0x06, 0x67, 0x10, 0xd8,
	0xfd, 0x90, 0x0e, 0xf8, 0x5c, 0x46, 0xff, 0xd9, 0x5f, 0x94, 0x91, 0x47, 0x00, 0x3a, 0x9a, 0xdd,
	0xd6, 0x1c, 0x23, 0x9f, 0x84, 0xd0, 0xb5, 0xcb, 0xe1, 0x4c, 0x9b, 0x68, 0x67, 0xc0, 0x81, 0xb8,
	0x76, 0x7a, 0x2c, 0xee, 0x1d, 0xc3, 0x33, 0xe8, 0xbb, 0xee, 0xcb, 0x29, 0xdb, 0xc3, 0x08, 0xcd,
	0x6f, 0x66, 0x65, 0x16, 0xff, 0xef, 0x66, 0x19, 0xfd, 0x0c, 0xe0, 0x70, 0xd9, 0xe6, 0x63, 0x7b,
	0x8f, 0xe4, 0x03, 0x44, 0x17, 0x76, 0xbf, 0x78, 0xcf, 0xc1, 0xd1, 0xc6, 0x2b, 0x48, 0x36, 0x97,
	0xc9, 0x7b, 0x38, 0xb8, 0x42, 0xb3, 0x35, 0xb9, 0x77, 0x10, 0x7d, 0x92, 0xd5, 0x3f, 0x19, 0x5c,
	0xb7, 0x8b, 0x37, 0x8d, 0x34, 0x33, 0x2b, 0x76, 0x89, 0x1c, 0xb7, 0x23, 0xf6, 0x19, 0x1e, 0x9d,
	0x57, 0xd5, 0x9a, 0x17, 0x3c, 0x79, 0x48, 0x71, 0x05, 0xdb, 0xa0, 0xfc, 0x15, 0x92, 0x7b, 0x36,
	0xf5, 0x5b, 0x25, 0x9a, 0x2d, 0xca, 0xbf, 0x0e, 0xbf, 0xc0, 0xf2, 0x83, 0x78, 0xd3, 0x71, 0x9f,
	0x88, 0x17, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x29, 0x9d, 0x83, 0x86, 0x29, 0x05, 0x00, 0x00,
}
