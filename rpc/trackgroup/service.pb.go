// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc/trackgroup/service.proto

package trackgroup

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"
import tag "user-api/rpc/tag"
import track "user-api/rpc/track"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TrackGroup struct {
	Id                   string                `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title                string                `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Cover                []byte                `protobuf:"bytes,3,opt,name=cover,proto3" json:"cover,omitempty"`
	ReleaseDate          *timestamp.Timestamp  `protobuf:"bytes,4,opt,name=release_date,json=releaseDate" json:"release_date,omitempty"`
	Type                 string                `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
	DisplayArtist        string                `protobuf:"bytes,6,opt,name=display_artist,json=displayArtist" json:"display_artist,omitempty"`
	MultipleComposers    bool                  `protobuf:"varint,7,opt,name=multiple_composers,json=multipleComposers" json:"multiple_composers,omitempty"`
	Private              bool                  `protobuf:"varint,8,opt,name=private" json:"private,omitempty"`
	CreatorId            string                `protobuf:"bytes,9,opt,name=creator_id,json=creatorId" json:"creator_id,omitempty"`
	UserGroupId          string                `protobuf:"bytes,10,opt,name=user_group_id,json=userGroupId" json:"user_group_id,omitempty"`
	UserGroup            *tag.RelatedUserGroup `protobuf:"bytes,11,opt,name=UserGroup" json:"UserGroup,omitempty"`
	LabelId              string                `protobuf:"bytes,12,opt,name=label_id,json=labelId" json:"label_id,omitempty"`
	Label                *tag.RelatedUserGroup `protobuf:"bytes,13,opt,name=Label" json:"Label,omitempty"`
	Tracks               []*track.Track        `protobuf:"bytes,14,rep,name=tracks" json:"tracks,omitempty"`
	Tags                 []*tag.Tag            `protobuf:"bytes,15,rep,name=tags" json:"tags,omitempty"`
	About                string                `protobuf:"bytes,16,opt,name=about" json:"about,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TrackGroup) Reset()         { *m = TrackGroup{} }
func (m *TrackGroup) String() string { return proto.CompactTextString(m) }
func (*TrackGroup) ProtoMessage()    {}
func (*TrackGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9249254a6c32c895, []int{0}
}
func (m *TrackGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrackGroup.Unmarshal(m, b)
}
func (m *TrackGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrackGroup.Marshal(b, m, deterministic)
}
func (dst *TrackGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackGroup.Merge(dst, src)
}
func (m *TrackGroup) XXX_Size() int {
	return xxx_messageInfo_TrackGroup.Size(m)
}
func (m *TrackGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackGroup.DiscardUnknown(m)
}

var xxx_messageInfo_TrackGroup proto.InternalMessageInfo

func (m *TrackGroup) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TrackGroup) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *TrackGroup) GetCover() []byte {
	if m != nil {
		return m.Cover
	}
	return nil
}

func (m *TrackGroup) GetReleaseDate() *timestamp.Timestamp {
	if m != nil {
		return m.ReleaseDate
	}
	return nil
}

func (m *TrackGroup) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *TrackGroup) GetDisplayArtist() string {
	if m != nil {
		return m.DisplayArtist
	}
	return ""
}

func (m *TrackGroup) GetMultipleComposers() bool {
	if m != nil {
		return m.MultipleComposers
	}
	return false
}

func (m *TrackGroup) GetPrivate() bool {
	if m != nil {
		return m.Private
	}
	return false
}

func (m *TrackGroup) GetCreatorId() string {
	if m != nil {
		return m.CreatorId
	}
	return ""
}

func (m *TrackGroup) GetUserGroupId() string {
	if m != nil {
		return m.UserGroupId
	}
	return ""
}

func (m *TrackGroup) GetUserGroup() *tag.RelatedUserGroup {
	if m != nil {
		return m.UserGroup
	}
	return nil
}

func (m *TrackGroup) GetLabelId() string {
	if m != nil {
		return m.LabelId
	}
	return ""
}

func (m *TrackGroup) GetLabel() *tag.RelatedUserGroup {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *TrackGroup) GetTracks() []*track.Track {
	if m != nil {
		return m.Tracks
	}
	return nil
}

func (m *TrackGroup) GetTags() []*tag.Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *TrackGroup) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

type TracksToTrackGroup struct {
	TrackGroupId         string         `protobuf:"bytes,1,opt,name=track_group_id,json=trackGroupId" json:"track_group_id,omitempty"`
	Tracks               []*track.Track `protobuf:"bytes,2,rep,name=tracks" json:"tracks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *TracksToTrackGroup) Reset()         { *m = TracksToTrackGroup{} }
func (m *TracksToTrackGroup) String() string { return proto.CompactTextString(m) }
func (*TracksToTrackGroup) ProtoMessage()    {}
func (*TracksToTrackGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9249254a6c32c895, []int{1}
}
func (m *TracksToTrackGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TracksToTrackGroup.Unmarshal(m, b)
}
func (m *TracksToTrackGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TracksToTrackGroup.Marshal(b, m, deterministic)
}
func (dst *TracksToTrackGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracksToTrackGroup.Merge(dst, src)
}
func (m *TracksToTrackGroup) XXX_Size() int {
	return xxx_messageInfo_TracksToTrackGroup.Size(m)
}
func (m *TracksToTrackGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_TracksToTrackGroup.DiscardUnknown(m)
}

var xxx_messageInfo_TracksToTrackGroup proto.InternalMessageInfo

func (m *TracksToTrackGroup) GetTrackGroupId() string {
	if m != nil {
		return m.TrackGroupId
	}
	return ""
}

func (m *TracksToTrackGroup) GetTracks() []*track.Track {
	if m != nil {
		return m.Tracks
	}
	return nil
}

func init() {
	proto.RegisterType((*TrackGroup)(nil), "resonate.api.user.TrackGroup")
	proto.RegisterType((*TracksToTrackGroup)(nil), "resonate.api.user.TracksToTrackGroup")
}

func init() {
	proto.RegisterFile("rpc/trackgroup/service.proto", fileDescriptor_service_9249254a6c32c895)
}

var fileDescriptor_service_9249254a6c32c895 = []byte{
	// 561 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x6d, 0x6b, 0x13, 0x41,
	0x10, 0xc7, 0x49, 0x9a, 0x3e, 0x64, 0xf2, 0x60, 0xbb, 0xa8, 0xac, 0x87, 0xd5, 0x23, 0x5a, 0x08,
	0x42, 0x2f, 0x12, 0x5f, 0xf9, 0xc2, 0x17, 0xb1, 0xd5, 0x12, 0x54, 0x90, 0x33, 0x05, 0x11, 0x24,
	0x6c, 0x6e, 0xc7, 0x63, 0xf1, 0xce, 0x5d, 0x76, 0x37, 0x81, 0x7c, 0x02, 0x3f, 0xa4, 0x5f, 0x46,
	0x76, 0x2f, 0x97, 0x07, 0x4c, 0x4b, 0x85, 0xbc, 0xbb, 0x99, 0xf9, 0xcd, 0x7f, 0x66, 0x67, 0x86,
	0x83, 0xc7, 0x5a, 0x25, 0x3d, 0xab, 0x59, 0xf2, 0x33, 0xd5, 0x72, 0xaa, 0x7a, 0x06, 0xf5, 0x4c,
	0x24, 0x18, 0x29, 0x2d, 0xad, 0x24, 0x27, 0x1a, 0x8d, 0xfc, 0xc5, 0x2c, 0x46, 0x4c, 0x89, 0x68,
	0x6a, 0x50, 0x07, 0x4f, 0x53, 0x29, 0xd3, 0x0c, 0x7b, 0x1e, 0x98, 0x4c, 0x7f, 0xf4, 0xac, 0xc8,
	0xd1, 0x58, 0x96, 0xab, 0x22, 0x27, 0x08, 0x1d, 0x76, 0xce, 0x94, 0xe8, 0x2d, 0xa5, 0x37, 0x55,
	0x83, 0x27, 0x9b, 0x04, 0x4b, 0x37, 0xe3, 0x9d, 0x3f, 0x35, 0x80, 0x91, 0xcb, 0xbb, 0x72, 0x2d,
	0x91, 0x36, 0x54, 0x05, 0xa7, 0x95, 0xb0, 0xd2, 0xad, 0xc7, 0x55, 0xc1, 0xc9, 0x7d, 0xd8, 0xb7,
	0xc2, 0x66, 0x48, 0xab, 0xde, 0x55, 0x18, 0xce, 0x9b, 0xc8, 0x19, 0x6a, 0xba, 0x17, 0x56, 0xba,
	0xcd, 0xb8, 0x30, 0xc8, 0x1b, 0x68, 0x6a, 0xcc, 0x90, 0x19, 0x1c, 0x73, 0x66, 0x91, 0xd6, 0xc2,
	0x4a, 0xb7, 0xd1, 0x0f, 0xa2, 0xe2, 0x11, 0x51, 0xf9, 0x88, 0x68, 0x54, 0x3e, 0x22, 0x6e, 0x2c,
	0xf8, 0x4b, 0x66, 0x91, 0x10, 0xa8, 0xd9, 0xb9, 0x42, 0xba, 0xef, 0x2b, 0xf9, 0x6f, 0x72, 0x06,
	0x6d, 0x2e, 0x8c, 0xca, 0xd8, 0x7c, 0xcc, 0xb4, 0x15, 0xc6, 0xd2, 0x03, 0x1f, 0x6d, 0x2d, 0xbc,
	0x03, 0xef, 0x24, 0xe7, 0x40, 0xf2, 0x69, 0x66, 0x85, 0xca, 0x70, 0x9c, 0xc8, 0x5c, 0x49, 0x83,
	0xda, 0xd0, 0xc3, 0xb0, 0xd2, 0x3d, 0x8a, 0x4f, 0xca, 0xc8, 0x45, 0x19, 0x20, 0x14, 0x0e, 0x95,
	0x16, 0x33, 0xd7, 0xe3, 0x91, 0x67, 0x4a, 0x93, 0x9c, 0x02, 0x24, 0x1a, 0x99, 0x95, 0x7a, 0x2c,
	0x38, 0xad, 0xfb, 0x5a, 0xf5, 0x85, 0x67, 0xc8, 0x49, 0x07, 0x5a, 0x6e, 0x9c, 0x63, 0xbf, 0x3e,
	0x47, 0x80, 0x27, 0x1a, 0xce, 0xe9, 0xe7, 0x37, 0xe4, 0x64, 0x00, 0xf5, 0xeb, 0xd2, 0xa4, 0x0d,
	0x3f, 0x82, 0x67, 0xd1, 0x3f, 0xab, 0x8d, 0x62, 0xcc, 0x98, 0x45, 0xbe, 0x44, 0xe3, 0x55, 0x16,
	0x79, 0x04, 0x47, 0x19, 0x9b, 0x60, 0xe6, 0x2a, 0x34, 0x7d, 0x85, 0x43, 0x6f, 0x0f, 0x39, 0x79,
	0x0d, 0xfb, 0x1f, 0xdd, 0x27, 0x6d, 0xdd, 0x5d, 0xb9, 0xc8, 0x20, 0x2f, 0xe1, 0xc0, 0x1f, 0x88,
	0xa1, 0xed, 0x70, 0xaf, 0xdb, 0xe8, 0xd3, 0x2d, 0xb9, 0xfe, 0x12, 0xe2, 0x05, 0x47, 0x5e, 0x40,
	0xcd, 0xb2, 0xd4, 0xd0, 0x7b, 0x9e, 0x7f, 0xb8, 0x8d, 0x67, 0x69, 0xec, 0x19, 0x77, 0x12, 0x6c,
	0x22, 0xa7, 0x96, 0x1e, 0x17, 0x87, 0xe2, 0x8d, 0x4e, 0x06, 0xc4, 0x4b, 0x9a, 0x91, 0x5c, 0x3b,
	0xb2, 0xe7, 0xd0, 0xf6, 0x15, 0x56, 0x73, 0x2c, 0x0e, 0xae, 0x69, 0x97, 0xcc, 0x90, 0xaf, 0xf5,
	0x5b, 0xbd, 0x5b, 0xbf, 0xfd, 0xdf, 0x35, 0x38, 0x59, 0x95, 0xf9, 0x52, 0xdc, 0x39, 0xf9, 0x0c,
	0xc7, 0x17, 0x6e, 0x83, 0xb8, 0xd6, 0xc1, 0xe9, 0x4d, 0x5a, 0x3e, 0x1c, 0xdc, 0x1e, 0x26, 0x9f,
	0xa0, 0x75, 0x85, 0x76, 0x67, 0x72, 0x1f, 0xe0, 0xf8, 0x5a, 0xf1, 0xff, 0x6a, 0x70, 0xdb, 0x2c,
	0xde, 0xe5, 0xca, 0xce, 0x9d, 0xd8, 0x25, 0x66, 0xb8, 0x1b, 0xb1, 0xaf, 0xf0, 0x60, 0xc0, 0xf9,
	0x96, 0x0d, 0x9e, 0xdd, 0xa4, 0xb8, 0x81, 0xdd, 0xa2, 0xfc, 0x1d, 0x82, 0x18, 0x73, 0x39, 0x2b,
	0xda, 0x34, 0xef, 0xb5, 0xcc, 0x77, 0x28, 0xff, 0xb6, 0xf9, 0x0d, 0x56, 0xff, 0xd9, 0xc9, 0x81,
	0xff, 0xf5, 0xbc, 0xfa, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xbf, 0x72, 0x72, 0xd0, 0x80, 0x05, 0x00,
	0x00,
}
