syntax = "proto3";

import "user-api/rpc/user/service.proto";
import "user-api/rpc/track/service.proto";
import "user-api/rpc/tag/service.proto";

package resonate.api.user;
option go_package = "usergroup";

service UserGroupService {
  rpc CreateUserGroup(UserGroup) returns (UserGroup);
  rpc GetUserGroup(UserGroup) returns (UserGroup);
  rpc UpdateUserGroup(UserGroup) returns (Empty);
  rpc DeleteUserGroup(UserGroup) returns (Empty);

  rpc GetLabelUserGroups(Empty) returns (GroupedUserGroups);
  rpc GetUserGroupTypes(Empty) returns (GroupTaxonomies);

  rpc AddRecommended(UserGroupRecommended) returns (Empty);
  rpc RemoveRecommended(UserGroupRecommended) returns (Empty);

  rpc AddMembers(UserGroupMembers) returns (Empty);
  rpc DeleteMembers(UserGroupMembers) returns (Empty);

  // rpc GetTrackAnalytics(UserGroup) returns (UserGroupTrackAnalytics); Payment API

  rpc SearchUserGroups(Query) returns (SearchResults);
}

message UserGroup {
  string id = 1; // required
  string display_name = 2; // required
  string description = 3;
  string short_bio = 4;
  bytes avatar = 5; // required
  bytes banner = 6;
  string owner_id = 7; // required
  GroupTaxonomy type = 8; // required
  repeated User followers = 9;
  repeated UserGroup members = 10;
  repeated UserGroup memberOfGroups = 11;
  repeated Link links = 12;
  repeated Tag tags = 13;
  StreetAddress address = 14;
  Privacy privacy = 16;

  repeated RelatedUserGroup recommended_artists = 17;

  RelatedTrackGroup featured_track_group = 18;
  repeated RelatedTrackGroup track_groups = 19;
  repeated Track highlighted_tracks = 20;

  map<string, string> publisher = 21;
  map<string, string> pro = 22;

  string group_email_address = 23;
}

message TrackAnalytics {
  string id = 1;
  string title = 2;
  int32 total_plays = 3;
  int32 paid_plays = 4;
  int32 free_plays = 5;
  float total_credits = 6;
  float user_group_credits = 7;
  float resonate_credits = 8;
}

message LabelTrackAnalytics {
  RelatedUserGroup user_group = 1;
  repeated TrackAnalytics tracks = 2;
}

message UserGroupTrackAnalytics {
  repeated TrackAnalytics artist_track_analytics = 1;
  repeated LabelTrackAnalytics label_track_analytics = 2;
}

message UserGroupRecommended {
  string user_group_id = 1;
  string recommended_id = 2;
}

message UserGroupMembers {
  string user_group_id = 1;
  repeated UserGroup members = 2;
}

message GroupTaxonomy {
  string id = 1;
  string type = 2;
  string name = 3;
}

message GroupTaxonomies {
  repeated GroupTaxonomy types = 1;
}

message Link {
  string id = 1;
  string platform = 2;
  string type = 3;
  string uri = 4;
  bool personal_data = 5;
}

message Privacy {
  string id = 1;
  bool private = 2;
  bool owned_tracks = 3;
  bool supported_artists = 4;
}

message GroupedUserGroups {
  repeated UserGroup labels = 1;
  repeated UserGroup artists = 2;
}
