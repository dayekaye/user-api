// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc/track/service.proto

package track

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "user-api/rpc/user"
import usergroup "user-api/rpc/usergroup"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Track struct {
	Id                   string                 `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title                string                 `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Status               string                 `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Enabled              bool                   `protobuf:"varint,4,opt,name=enabled" json:"enabled,omitempty"`
	TrackNumber          int32                  `protobuf:"varint,5,opt,name=track_number,json=trackNumber" json:"track_number,omitempty"`
	TrackGroups          []*TrackGroup          `protobuf:"bytes,6,rep,name=track_groups,json=trackGroups" json:"track_groups,omitempty"`
	CreatorId            string                 `protobuf:"bytes,7,opt,name=creator_id,json=creatorId" json:"creator_id,omitempty"`
	UserGroupId          string                 `protobuf:"bytes,8,opt,name=user_group_id,json=userGroupId" json:"user_group_id,omitempty"`
	Artists              []*usergroup.UserGroup `protobuf:"bytes,9,rep,name=artists" json:"artists,omitempty"`
	TrackServerId        string                 `protobuf:"bytes,10,opt,name=track_server_id,json=trackServerId" json:"track_server_id,omitempty"`
	Tags                 []*usergroup.Tag       `protobuf:"bytes,11,rep,name=tags" json:"tags,omitempty"`
	Duration             float32                `protobuf:"fixed32,12,opt,name=duration" json:"duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Track) Reset()         { *m = Track{} }
func (m *Track) String() string { return proto.CompactTextString(m) }
func (*Track) ProtoMessage()    {}
func (*Track) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_a1c0e8a2a5848e1b, []int{0}
}
func (m *Track) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Track.Unmarshal(m, b)
}
func (m *Track) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Track.Marshal(b, m, deterministic)
}
func (dst *Track) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Track.Merge(dst, src)
}
func (m *Track) XXX_Size() int {
	return xxx_messageInfo_Track.Size(m)
}
func (m *Track) XXX_DiscardUnknown() {
	xxx_messageInfo_Track.DiscardUnknown(m)
}

var xxx_messageInfo_Track proto.InternalMessageInfo

func (m *Track) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Track) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Track) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Track) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Track) GetTrackNumber() int32 {
	if m != nil {
		return m.TrackNumber
	}
	return 0
}

func (m *Track) GetTrackGroups() []*TrackGroup {
	if m != nil {
		return m.TrackGroups
	}
	return nil
}

func (m *Track) GetCreatorId() string {
	if m != nil {
		return m.CreatorId
	}
	return ""
}

func (m *Track) GetUserGroupId() string {
	if m != nil {
		return m.UserGroupId
	}
	return ""
}

func (m *Track) GetArtists() []*usergroup.UserGroup {
	if m != nil {
		return m.Artists
	}
	return nil
}

func (m *Track) GetTrackServerId() string {
	if m != nil {
		return m.TrackServerId
	}
	return ""
}

func (m *Track) GetTags() []*usergroup.Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Track) GetDuration() float32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

type TrackGroup struct {
	// TODO put in trackgroup/service.proto
	Id                   string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Cover                []byte   `protobuf:"bytes,3,opt,name=cover,proto3" json:"cover,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrackGroup) Reset()         { *m = TrackGroup{} }
func (m *TrackGroup) String() string { return proto.CompactTextString(m) }
func (*TrackGroup) ProtoMessage()    {}
func (*TrackGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_a1c0e8a2a5848e1b, []int{1}
}
func (m *TrackGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrackGroup.Unmarshal(m, b)
}
func (m *TrackGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrackGroup.Marshal(b, m, deterministic)
}
func (dst *TrackGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackGroup.Merge(dst, src)
}
func (m *TrackGroup) XXX_Size() int {
	return xxx_messageInfo_TrackGroup.Size(m)
}
func (m *TrackGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackGroup.DiscardUnknown(m)
}

var xxx_messageInfo_TrackGroup proto.InternalMessageInfo

func (m *TrackGroup) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TrackGroup) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *TrackGroup) GetCover() []byte {
	if m != nil {
		return m.Cover
	}
	return nil
}

func init() {
	proto.RegisterType((*Track)(nil), "resonate.api.user.Track")
	proto.RegisterType((*TrackGroup)(nil), "resonate.api.user.TrackGroup")
}

func init() { proto.RegisterFile("rpc/track/service.proto", fileDescriptor_service_a1c0e8a2a5848e1b) }

var fileDescriptor_service_a1c0e8a2a5848e1b = []byte{
	// 421 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0x5d, 0x8b, 0xd3, 0x40,
	0x14, 0x25, 0xe9, 0xa6, 0x49, 0x6f, 0xb2, 0x8a, 0xc3, 0xb2, 0x0e, 0xc1, 0xc5, 0x58, 0x44, 0x82,
	0x60, 0x0a, 0x2b, 0xf8, 0x28, 0xae, 0x1f, 0xac, 0x7d, 0xf1, 0x21, 0xee, 0xbe, 0xf8, 0xb2, 0x4c,
	0x33, 0x97, 0x32, 0xd8, 0x4d, 0xc2, 0xcc, 0xa4, 0xe0, 0x2f, 0xf1, 0x67, 0xf8, 0x17, 0x65, 0x6e,
	0x1a, 0xa5, 0xb4, 0x05, 0xa9, 0x2f, 0xa5, 0xe7, 0xe4, 0xdc, 0x73, 0xcf, 0xbd, 0x37, 0x81, 0xc7,
	0xba, 0xad, 0x66, 0x56, 0x8b, 0xea, 0xfb, 0xcc, 0xa0, 0x5e, 0xab, 0x0a, 0x8b, 0x56, 0x37, 0xb6,
	0x61, 0x8f, 0x34, 0x9a, 0xa6, 0x16, 0x16, 0x0b, 0xd1, 0xaa, 0xa2, 0x33, 0xa8, 0xd3, 0xa7, 0xee,
	0xf7, 0x95, 0x68, 0xd5, 0xcc, 0x15, 0x39, 0xb0, 0x5d, 0x93, 0x3e, 0xdf, 0x11, 0x2c, 0x75, 0xd3,
	0xb5, 0xdb, 0xaa, 0xe9, 0xaf, 0x11, 0x04, 0x37, 0xae, 0x23, 0x7b, 0x00, 0xbe, 0x92, 0xdc, 0xcb,
	0xbc, 0x7c, 0x52, 0xfa, 0x4a, 0xb2, 0x33, 0x08, 0xac, 0xb2, 0x2b, 0xe4, 0x3e, 0x51, 0x3d, 0x60,
	0xe7, 0x30, 0x36, 0x56, 0xd8, 0xce, 0xf0, 0x11, 0xd1, 0x1b, 0xc4, 0x38, 0x84, 0x58, 0x8b, 0xc5,
	0x0a, 0x25, 0x3f, 0xc9, 0xbc, 0x3c, 0x2a, 0x07, 0xc8, 0x9e, 0x41, 0x42, 0x23, 0xdd, 0xd5, 0xdd,
	0xfd, 0x02, 0x35, 0x0f, 0x32, 0x2f, 0x0f, 0xca, 0x98, 0xb8, 0x2f, 0x44, 0xb1, 0x77, 0x83, 0x84,
	0x12, 0x1a, 0x3e, 0xce, 0x46, 0x79, 0x7c, 0x79, 0x51, 0xec, 0x4c, 0x5d, 0x50, 0xd4, 0x6b, 0xa7,
	0xda, 0x38, 0xd0, 0x7f, 0xc3, 0x2e, 0x00, 0x2a, 0x8d, 0xc2, 0x36, 0xfa, 0x4e, 0x49, 0x1e, 0x52,
	0xb4, 0xc9, 0x86, 0x99, 0x4b, 0x36, 0x85, 0x53, 0x57, 0xde, 0xfb, 0x3b, 0x45, 0x44, 0x8a, 0xd8,
	0x91, 0xe4, 0x30, 0x97, 0xec, 0x0d, 0x84, 0x42, 0x5b, 0x65, 0xac, 0xe1, 0x13, 0xea, 0xff, 0x64,
	0x4f, 0xff, 0xdb, 0xa1, 0xa0, 0x1c, 0xc4, 0xec, 0x05, 0x3c, 0xec, 0xc3, 0xbb, 0xc5, 0x22, 0xf5,
	0x07, 0x72, 0x3f, 0x25, 0xfa, 0x2b, 0xb1, 0x73, 0xc9, 0x5e, 0xc2, 0x89, 0x15, 0x4b, 0xc3, 0x63,
	0x32, 0x3f, 0xdf, 0x37, 0x9c, 0x58, 0x96, 0xa4, 0x61, 0x29, 0x44, 0xb2, 0xd3, 0xc2, 0xaa, 0xa6,
	0xe6, 0x49, 0xe6, 0xe5, 0x7e, 0xf9, 0x07, 0x4f, 0x3f, 0x03, 0xfc, 0xdd, 0xc2, 0x3f, 0x5e, 0xed,
	0x0c, 0x82, 0xaa, 0x59, 0xa3, 0xa6, 0xa3, 0x25, 0x65, 0x0f, 0x2e, 0x7f, 0xfa, 0x90, 0xdc, 0x0c,
	0x19, 0x55, 0x85, 0xec, 0x0a, 0xe2, 0x0f, 0x6e, 0x67, 0xd8, 0xbf, 0x11, 0xfc, 0xd0, 0x01, 0xd2,
	0x83, 0x4f, 0xd8, 0x5b, 0x88, 0xae, 0xd1, 0x1e, 0x5f, 0x7f, 0x05, 0xf1, 0x6d, 0x2b, 0x8f, 0x8c,
	0xf0, 0xe9, 0xbe, 0xb5, 0x3f, 0x9c, 0xc5, 0x47, 0x5c, 0xe1, 0x7f, 0x58, 0xbc, 0x0f, 0xbf, 0x05,
	0x74, 0xbc, 0xc5, 0x98, 0xbe, 0x92, 0xd7, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x2f, 0xdc, 0x5d,
	0x4d, 0x9a, 0x03, 0x00, 0x00,
}
