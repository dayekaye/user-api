// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc/user/service.proto

package user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type User struct {
	Id                     string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Username               string   `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Email                  string   `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	DisplayName            string   `protobuf:"bytes,4,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	FullName               string   `protobuf:"bytes,5,opt,name=full_name,json=fullName" json:"full_name,omitempty"`
	FirstName              string   `protobuf:"bytes,6,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	LastName               string   `protobuf:"bytes,7,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
	Member                 bool     `protobuf:"varint,8,opt,name=member" json:"member,omitempty"`
	Avatar                 []byte   `protobuf:"bytes,9,opt,name=avatar,proto3" json:"avatar,omitempty"`
	NewsletterNotification bool     `protobuf:"varint,10,opt,name=newsletter_notification,json=newsletterNotification" json:"newsletter_notification,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_e4111f1228109370, []int{0}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (dst *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(dst, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *User) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *User) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *User) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *User) GetMember() bool {
	if m != nil {
		return m.Member
	}
	return false
}

func (m *User) GetAvatar() []byte {
	if m != nil {
		return m.Avatar
	}
	return nil
}

func (m *User) GetNewsletterNotification() bool {
	if m != nil {
		return m.NewsletterNotification
	}
	return false
}

// Used for:
// - connecting to user group
// - follow/unfollow artist
type UserToUserGroup struct {
	UserId               string   `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	UserGroupId          string   `protobuf:"bytes,2,opt,name=user_group_id,json=userGroupId" json:"user_group_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserToUserGroup) Reset()         { *m = UserToUserGroup{} }
func (m *UserToUserGroup) String() string { return proto.CompactTextString(m) }
func (*UserToUserGroup) ProtoMessage()    {}
func (*UserToUserGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_e4111f1228109370, []int{1}
}
func (m *UserToUserGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserToUserGroup.Unmarshal(m, b)
}
func (m *UserToUserGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserToUserGroup.Marshal(b, m, deterministic)
}
func (dst *UserToUserGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserToUserGroup.Merge(dst, src)
}
func (m *UserToUserGroup) XXX_Size() int {
	return xxx_messageInfo_UserToUserGroup.Size(m)
}
func (m *UserToUserGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_UserToUserGroup.DiscardUnknown(m)
}

var xxx_messageInfo_UserToUserGroup proto.InternalMessageInfo

func (m *UserToUserGroup) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UserToUserGroup) GetUserGroupId() string {
	if m != nil {
		return m.UserGroupId
	}
	return ""
}

// Used for:
// - add/remove favorite tracks
type UserToTrack struct {
	UserId               string   `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	TrackId              string   `protobuf:"bytes,2,opt,name=track_id,json=trackId" json:"track_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserToTrack) Reset()         { *m = UserToTrack{} }
func (m *UserToTrack) String() string { return proto.CompactTextString(m) }
func (*UserToTrack) ProtoMessage()    {}
func (*UserToTrack) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_e4111f1228109370, []int{2}
}
func (m *UserToTrack) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserToTrack.Unmarshal(m, b)
}
func (m *UserToTrack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserToTrack.Marshal(b, m, deterministic)
}
func (dst *UserToTrack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserToTrack.Merge(dst, src)
}
func (m *UserToTrack) XXX_Size() int {
	return xxx_messageInfo_UserToTrack.Size(m)
}
func (m *UserToTrack) XXX_DiscardUnknown() {
	xxx_messageInfo_UserToTrack.DiscardUnknown(m)
}

var xxx_messageInfo_UserToTrack proto.InternalMessageInfo

func (m *UserToTrack) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UserToTrack) GetTrackId() string {
	if m != nil {
		return m.TrackId
	}
	return ""
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_e4111f1228109370, []int{3}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*User)(nil), "resonate.api.user.User")
	proto.RegisterType((*UserToUserGroup)(nil), "resonate.api.user.UserToUserGroup")
	proto.RegisterType((*UserToTrack)(nil), "resonate.api.user.UserToTrack")
	proto.RegisterType((*Empty)(nil), "resonate.api.user.Empty")
}

func init() { proto.RegisterFile("rpc/user/service.proto", fileDescriptor_service_e4111f1228109370) }

var fileDescriptor_service_e4111f1228109370 = []byte{
	// 459 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x51, 0x6b, 0x13, 0x41,
	0x10, 0xc7, 0x49, 0x4c, 0xee, 0x92, 0x49, 0xac, 0xba, 0x4a, 0x72, 0x56, 0x94, 0x78, 0x4f, 0x79,
	0xba, 0x82, 0x3e, 0xf8, 0x20, 0x28, 0xb1, 0xda, 0x12, 0x28, 0x11, 0xce, 0xe6, 0xc5, 0x97, 0xb0,
	0xbd, 0x9d, 0xc8, 0xe2, 0xde, 0xed, 0xb1, 0xb7, 0x49, 0xe9, 0x87, 0xf1, 0x23, 0xf8, 0x1d, 0x65,
	0x76, 0x93, 0x36, 0xa0, 0x57, 0xa1, 0xcd, 0x4b, 0xe0, 0x3f, 0xbf, 0x99, 0x5f, 0xb8, 0x99, 0xe3,
	0x60, 0x60, 0xca, 0xec, 0x68, 0x55, 0xa1, 0x39, 0xaa, 0xd0, 0xac, 0x65, 0x86, 0x49, 0x69, 0xb4,
	0xd5, 0xec, 0x89, 0xc1, 0x4a, 0x17, 0xdc, 0x62, 0xc2, 0x4b, 0x99, 0x50, 0x43, 0xfc, 0xbb, 0x09,
	0xad, 0x79, 0x85, 0x86, 0x1d, 0x40, 0x53, 0x8a, 0xa8, 0x31, 0x6a, 0x8c, 0xbb, 0x69, 0x53, 0x0a,
	0x76, 0x08, 0x1d, 0x6a, 0x28, 0x78, 0x8e, 0x51, 0xd3, 0x55, 0xaf, 0x33, 0x7b, 0x06, 0x6d, 0xcc,
	0xb9, 0x54, 0xd1, 0x03, 0x07, 0x7c, 0x60, 0xaf, 0xa1, 0x2f, 0x64, 0x55, 0x2a, 0x7e, 0xb5, 0x70,
	0x53, 0x2d, 0x07, 0x7b, 0x9b, 0xda, 0x8c, 0x06, 0x5f, 0x40, 0x77, 0xb9, 0x52, 0xca, 0xf3, 0xb6,
	0xb7, 0x52, 0xc1, 0xc1, 0x97, 0x00, 0x4b, 0x69, 0x2a, 0xeb, 0x69, 0xe0, 0x68, 0xd7, 0x55, 0xb6,
	0xb3, 0x8a, 0x6f, 0x69, 0xe8, 0x67, 0xa9, 0xe0, 0xe0, 0x00, 0x82, 0x1c, 0xf3, 0x0b, 0x34, 0x51,
	0x67, 0xd4, 0x18, 0x77, 0xd2, 0x4d, 0xa2, 0x3a, 0x5f, 0x73, 0xcb, 0x4d, 0xd4, 0x1d, 0x35, 0xc6,
	0xfd, 0x74, 0x93, 0xd8, 0x3b, 0x18, 0x16, 0x78, 0x59, 0x29, 0xb4, 0x16, 0xcd, 0xa2, 0xd0, 0x56,
	0x2e, 0x65, 0xc6, 0xad, 0xd4, 0x45, 0x04, 0x4e, 0x30, 0xb8, 0xc1, 0xb3, 0x1d, 0x1a, 0xcf, 0xe0,
	0x11, 0xad, 0xeb, 0x5c, 0xd3, 0xef, 0xa9, 0xd1, 0xab, 0x92, 0x0d, 0x21, 0xa4, 0xcd, 0x2c, 0xae,
	0xd7, 0x17, 0x50, 0x9c, 0x0a, 0x16, 0xc3, 0x43, 0x07, 0x7e, 0x50, 0x1b, 0x61, 0xbf, 0xc7, 0xde,
	0x6a, 0x3b, 0x3a, 0x15, 0xf1, 0x04, 0x7a, 0xde, 0x77, 0x6e, 0x78, 0xf6, 0xb3, 0xde, 0xf5, 0x1c,
	0x3a, 0x96, 0x3a, 0x6e, 0x34, 0xa1, 0xcb, 0x53, 0x11, 0x87, 0xd0, 0xfe, 0x92, 0x97, 0xf6, 0xea,
	0xcd, 0xaf, 0xb6, 0x97, 0x7d, 0xf3, 0x47, 0x67, 0x1f, 0x00, 0x8e, 0x0d, 0x72, 0x8b, 0xee, 0xc0,
	0xc3, 0xe4, 0xaf, 0xeb, 0x27, 0x04, 0x0e, 0xeb, 0x00, 0x7b, 0x0f, 0xe1, 0x29, 0xda, 0x3b, 0x0e,
	0x7f, 0x04, 0x98, 0x97, 0xe2, 0xbf, 0x7f, 0x1e, 0xfd, 0x03, 0xb8, 0xa7, 0x21, 0xc1, 0x67, 0x54,
	0x78, 0x77, 0x41, 0x0a, 0xec, 0x58, 0x17, 0x05, 0x66, 0x76, 0xf7, 0x5a, 0x71, 0x8d, 0x68, 0xa7,
	0xe7, 0x16, 0xe7, 0x19, 0xf4, 0x4f, 0xb4, 0x52, 0xfa, 0x72, 0x62, 0xac, 0xac, 0xec, 0x3d, 0x6d,
	0x33, 0x38, 0x98, 0x17, 0xcb, 0xfd, 0xf9, 0xce, 0xe0, 0xf1, 0x44, 0x88, 0x13, 0xbe, 0xd6, 0x46,
	0x5a, 0xf4, 0x6f, 0xd4, 0xab, 0x5a, 0xa3, 0xe3, 0xb7, 0xd8, 0xbe, 0xc2, 0xd3, 0x14, 0x73, 0xbd,
	0xc6, 0x3d, 0x09, 0x3f, 0x05, 0xdf, 0x5b, 0x94, 0x2e, 0x02, 0xf7, 0x35, 0x7a, 0xfb, 0x27, 0x00,
	0x00, 0xff, 0xff, 0xf7, 0x16, 0x2d, 0x39, 0xa7, 0x04, 0x00, 0x00,
}
