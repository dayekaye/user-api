syntax = "proto3";

package resonate.api.user;
option go_package = "user";

import "user-api/rpc/track/service.proto";

service UserService {
  rpc CreateUser(User) returns (User);
  rpc GetUser(User) returns (User);
  rpc UpdateUser(User) returns (Empty);
  rpc DeleteUser(User) returns (Empty);
  rpc FollowGroup(UserToUserGroup) returns (Empty);
  rpc UnfollowGroup(UserToUserGroup) returns (Empty);
  rpc AddFavoriteTrack(UserToTrack) returns (Empty);
  rpc RemoveFavoriteTrack(UserToTrack) returns (Empty);

  // User Library
  rpc GetPlaylists(User) returns (Playlists);
  rpc GetFavoriteTracks(User) returns (Tracks);
  rpc GetOwnedTracks(User) returns (Tracks);
  rpc GetTrackHistory(User) returns (Tracks);

  rpc CreatePlay(CreatePlayRequest) returns (CreatePlayResponse);
}

message User {
  string id = 1; // required

  string username = 2; // required
  string email = 3; // required
  string display_name = 4; // required TODO remove
  string full_name = 5; // required
  string first_name = 6;
  string last_name = 7;
  bool member = 8;
  bytes avatar = 9;
  bool newsletter_notification = 10;
  repeated string favorite_tracks = 11;
  repeated string followed_groups = 12;
  repeated UserGroupResponse owner_of_groups = 13;
  StreetAddress residence_address = 14;
}

message Playlists {
  repeated RelatedTrackGroup playlists = 1;
}

message Tracks {
  repeated Track tracks = 1;
}

message StreetAddress {
  string id = 1;
  map<string, string> data = 2;
  bool personal_data = 3;
}

message UserGroupResponse {
  string id = 1;
  string display_name = 2;
  bytes avatar = 3;
}

// Used for:
// - connecting to user group
// - follow/unfollow group
message UserToUserGroup {
  string user_id = 1; // required
  string user_group_id = 2; // required
}

// Used for:
// - adding/removing favorite tracks
message UserToTrack {
  string user_id = 1; // required
  string track_id = 2; // required
}

// Used for:
// - adding a track play (i.e. track has been streamed >=45s)
message Play {
  string user_id = 1; // required
  string track_id = 2; // required
  string type = 3; // required
  float credits = 4; // credits spent by user
}

message CreatePlayRequest {
  Play play = 1; // required
  float updated_credits = 2; // required
}

message CreatePlayResponse {
  int32 updated_play_count = 1; // required
  float updated_credits = 2; // required
}
