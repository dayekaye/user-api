FORMAT: 1A

# Users/Tracks API

Users/Tracks API is the main API to access Users, UserGroups, Tracks, TrackGroups and related collections.


## Users Collection [/twirp/resonate.api.user.UserService/]

### Get User [POST /twirp/resonate.api.user.UserService/GetUser]

TODO: add scope for restricted access (public/private user profile).

+ Request (application/json)

        {
            "id": "b09cd642-9df8-4f44-bb5a-169829043110"
        }

+ Response 200 (application/json)

        {
            "id": "b09cd642-9df8-4f44-bb5a-169829043110",
            "created_at": "2015-08-05T08:40:51.620Z",
            "updated_at": "2015-08-05T09:40:51.620Z",
            "full_name": "John Doe",
            "display_name": "JohnD",
            "first_name": "John",
            "last_name": "Doe",
            "residence_address": {
              "id": "c09cd642-9df8-4f44-bb5a-169829043110",
              "data": {"some": "data"}
            },
            "email": "john@doe.com",
            "username": "jdoe",
            "member": false,
            "memberOfGroups": [{
              "id": "c09cd642-9df8-4f44-bb5a-169829043110",
              "display_name": "best band ever",
              "avatar": "avatar"
            }],
            "ownerOfGroups": [{
              "id": "d09cd642-9df8-4f44-bb5a-169829043110",
              "display_name": "DJ John",
              "avatar": "avatar"
            }],
        }



### Create a New User [POST /twirp/resonate.api.user.UserService/CreateUser]

Used for signup.

+ Request (application/json)

        {
            "full_name": "John Doe",
            "display_name": "JohnD",
            "email": "john@doe.com",
            "username": "jdoe"
        }

+ Response 201 (application/json)

    + Body

            {
                "id": "b09cd642-9df8-4f44-bb5a-169829043110",
                "full_name": "John Doe",
                "display_name": "JohnD",
                "email": "john@doe.com",
                "username": "jdoe"
            }

### Update a User [POST /twirp/resonate.api.user.UserService/UpdateUser]

In the example, we update first_name and last_name of previously created user and add a street address.
In the case of updating an existing street address, its id should be part of the street_address field.

+ Request (application/json)

        {
            "id": "b09cd642-9df8-4f44-bb5a-169829043110",
            "first_name": "John",
            "last_name": "Doe",
            "full_name": "John Doe",
            "display_name": "JohnD",
            "email": "john@doe.com",
            "username": "jdoe",
            "street_address": {
              "data": "some": "data"
            }
        }

+ Response 204 (application/json)

### Delete a User [POST /twirp/resonate.api.user.UserService/DeleteUser]


+ Request (application/json)

        {
            "id": "b09cd642-9df8-4f44-bb5a-169829043110"
        }

+ Response 204 (application/json)

### Add Favorite Track [POST /twirp/resonate.api.user.UserService/AddFavoriteTrack]

+ Request (application/json)

        {
            "user_id": "b09cd642-9df8-4f44-bb5a-169829043110",
            "track_id": "129f3a00-1022-4cb6-beda-8f7eeef8bd31"
        }

+ Response 204 (application/json)

### Remove Favorite Track [POST /twirp/resonate.api.user.UserService/RemoveFavoriteTrack]

+ Request (application/json)

        {
            "user_id": "b09cd642-9df8-4f44-bb5a-169829043110",
            "track_id": "129f3a00-1022-4cb6-beda-8f7eeef8bd31"
        }

+ Response 204 (application/json)

### Follow User Group [POST /twirp/resonate.api.user.UserService/FollowGroup]

+ Request (application/json)

        {
            "user_id": "b09cd642-9df8-4f44-bb5a-169829043110",
            "user_group_id": "129f3a00-1022-4cb6-beda-8f7eeef8bd31"
        }

+ Response 204 (application/json)

### Unfollow User Group [POST /twirp/resonate.api.user.UserService/UnfollowGroup]

+ Request (application/json)

        {
            "user_id": "b09cd642-9df8-4f44-bb5a-169829043110",
            "user_group_id": "129f3a00-1022-4cb6-beda-8f7eeef8bd31"
        }

+ Response 204 (application/json)

### Get Feed [POST /twirp/resonate.api.user.UserService/GetFeed]

infinite feed, needs pagination

+ Request (application/json)

        {
            "user_id": "b09cd642-9df8-4f44-bb5a-169829043110"
        }

+ Response 200 (application/json)

## UserGroups Collection [/twirp/resonate.api.user.UserGroupService/]

### Create a New UserGroup [POST /twirp/resonate.api.user.UserGroupService/CreateUserGroup]

The user who creates a user group is by default the owner of this user group.
Can be a user creating an artist or a label or a user profile.

if type is "user", "members" should be empty.

If type is "artist", "members" (array of user object with ids, owners of selected user_groups of type "user") can be added to the request body to list members (musicians in a band for instance).

If type is "label", cf. Add/Remove SubGroup to list artists that are part of this label and attach this label to artists.

+ type (string) - type of user group: user, artist, label or distributor

+ Request (application/json)

        {
            "type": {
              "type": "artist"
            },
            "owner_id": "636f3a00-1022-4cb6-beda-8f7eeef8bd31",
            "display_name": "BestArtistEver",
            "short_bio": "I am the best artist ever",
            "avatar": "blob",
            "banner": "blob",
            "address": {
              "data": {"some": "address"}
            },
            "tags": ]
              {"type": "genre", "name": "ambient"},
              {"type": "genre", "name": "experimental"}
            ],
            "links": [
                {"platform": "instagram", "uri": "https://www.instagram.com/bestartistever"},
                {"platform": "twitter", "uri": "https://twitter.com/bestartistever"}
            ],
            "recommended_artists": [
              {"id": "166f3a00-1022-4cb6-beda-8f7eeef8bd31"},
              {"id": "366f3a00-1022-4cb6-beda-8f7eeef8bd31"}
            ],
            "members": [
              {"id": "386f3a00-1022-4cb6-beda-8f7eeef8bd31"}
            ]
        }

+ Response 201 (application/json)

    + Body

            {
                "id": "b09cd642-9df8-4f44-bb5a-169829043110",
                "owner_id": "636f3a00-1022-4cb6-beda-8f7eeef8bd31",
                "type": {
                  "id": "736f3a00-1022-4cb6-beda-8f7eeef8bd31",
                  "type": "artist"
                },
                "display_name": "BestArtistEver"
                "short_bio": "I am the best artist ever",
                "avatar": "blob",
                "banner": "blob",
                "links": [
                    {"id": "406f3a00-1022-4cb6-beda-8f7eeef8bd31", "platform": "instagram", "uri": "https://www.instagram.com/bestartistever"},
                    {"id": "416f3a00-1022-4cb6-beda-8f7eeef8bd31", "platform": "twitter", "uri": "https://twitter.com/bestartistever"}
                ],
                "address": {
                  "id": "427f3a00-1022-4cb6-beda-8f7eeef8bd31",
                  "data": {"some": "address"}
                },
                "privacy": {
                  "id": "427f3a00-1022-4cb6-beda-8f7eeef8bd31",
                  "private": false,
                  "owned_tracks": true,
                  "supported_artists": true,
                },
                "tags": [
                  {"id": "426f3a00-1022-4cb6-beda-8f7eeef8bd31", "type": "genre", "name": "ambient"},
                  {"id": "436f3a00-1022-4cb6-beda-8f7eeef8bd31", "type": "genre", "name": "experimental"}
                ],
                "recommended_artists": [
                  {"id": "166f3a00-1022-4cb6-beda-8f7eeef8bd31", "display_name": "name", "avatar": "blob"},
                  {"id": "366f3a00-1022-4cb6-beda-8f7eeef8bd31", "display_name": "name", "avatar": "blob"}
                ],
                "members": [
                  {"id": "386f3a00-1022-4cb6-beda-8f7eeef8bd31"}
                ]
            }

### Update UserGroup [POST /twirp/resonate.api.user.UserGroupService/UpdateUserGroup]

If the request body doesn't contain a certain user group attribute, it will be set to nil.

To update address or privacy, update desired fields (data for address; private, owned_track and supported_artists for privacy). Type and owner_id are not updatable.

To add or remove tags or links:
- add {...obj} to the corresponding array in the request body with info (type, name for tags; platform, uri for links).
- remove {"id": "idToRemove"} from the array.

To add or remove recommended_artists:
- add {"id": "idToadd"} to the corresponding array in the request body.
- remove {"id": "idToRemove"} from the array.


+ Request (application/json)

        {
            "id": "b09cd642-9df8-4f44-bb5a-169829043110",
            "description": "I am the very best artist ever",
            "avatar": "blob",
            "owner_id": "636f3a00-1022-4cb6-beda-8f7eeef8bd31",
            "privacy": {
                "id": "427f3a00-1022-4cb6-beda-8f7eeef8bd31",
                "private": false,
                "owned_tracks": true,
                "supported_artists": true,
            },
            "address": {
                "id": "437f3a00-1022-4cb6-beda-8f7eeef8bd31",
                "data": {"some": "new address"}
            },
            "type": {
                "id": "736f3a00-1022-4cb6-beda-8f7eeef8bd31",
                "type": "artist"
            }
        }

+ Response 204 (application/json)

### Delete UserGroup [POST /twirp/resonate.api.user.UserGroupService/DeleteUserGroup]

+ Request (application/json)

        {
            "id": "b09cd642-9df8-4f44-bb5a-169829043110"
        }

+ Response 204 (application/json)

### Get Label UserGroups [POST /twirp/resonate.api.user.UserGroupService/GetLabelUserGroups]

Return id, display_name and avatar for each labels.
Support pagination (?page=2?limit=50).

+ Response 200 (application/json)

    + Body

            {
                "labels": [
                    {
                      "id": "b09cd642-9df8-4f44-bb5a-169829043110",
                      "display_name": "best label ever",
                      "avatar": "blob"
                    }
                ]
            }

### Get UserGroup [POST /twirp/resonate.api.user.UserGroupService/GetUserGroup]

scope private/public.

+ Request (application/json)

        {
            "id": "b09cd642-9df8-4f44-bb5a-169829043110"
        }

+ Response 200 (application/json)

    + Body

        {
            "id": "b09cd642-9df8-4f44-bb5a-169829043110",
            "owner": {
                "id": "636f3a00-1022-4cb6-beda-8f7eeef8bd31"
            },
            "display_name": "BestArtistEver"
            "description": "long bio",
            "short_bio": "short bio",
            "avatar": "blob",
            "banner": "blob",
            "members": [],
            "labels": [
                {
                    "id": "d38bcdb7-9a05-4077-a6c7-6aec285b865e",
                    "display_name": "best label ever",
                    "avatar": "blob"
                }
            ],
            "links": [
                {"id": "406f3a00-1022-4cb6-beda-8f7eeef8bd31", "platform": "instagram", "uri": "https://www.instagram.com/bestartistever"},
                {"id": "416f3a00-1022-4cb6-beda-8f7eeef8bd31", "platform": "twitter", "uri": "https://twitter.com/bestartistever"}
            ],
            "address": {
              "id": "427f3a00-1022-4cb6-beda-8f7eeef8bd31",
              "data": {"some": "address"}
            },
            "tags": [
              {"id": "426f3a00-1022-4cb6-beda-8f7eeef8bd31", "type": "genre", "name": "ambient"},
              {"id": "436f3a00-1022-4cb6-beda-8f7eeef8bd31", "type": "genre", "name": "experimental"}
            ],
            "recommended_artists": [
              {"id": "166f3a00-1022-4cb6-beda-8f7eeef8bd31", "display_name": "name", "avatar": "blob"},
              {"id": "366f3a00-1022-4cb6-beda-8f7eeef8bd31", "display_name": "name", "avatar": "blob"}
            ],
        }

### Get User Group Types [POST /twirp/resonate.api.user.UserGroupService/GetUserGroupTypes]

Return all existing group taxonomies.

+ Response 200 (application/json)

    + Body

        {
            "types": [
                {"id":  "156f3a00-1022-4cb6-beda-8f7eeef8bd31", "type": "user", "name": "User"},
                {"id":  "176f3a00-1022-4cb6-beda-8f7eeef8bd31", "type": "artist", "name": "Artist"},
                {"id":  "186f3a00-1022-4cb6-beda-8f7eeef8bd31", "type": "label", "name": "Label"},
            ]
        }

### DEPRECATED Add SubGroups [POST /twirp/resonate.api.user.UserGroupService/AddSubGroups]

For labels to add artists as subgroups.
For distributors to add labels as subgroups.
user_groups array contain user groups' ids to add.

+ Request (application/json)

        {
            "user_group_id": "b09cd642-9df8-4f44-bb5a-169829043110",
            "user_groups": [
                {"id": "b19cd642-9df8-4f44-bb5a-169829043110"},
                {"id": "b7b47086-3212-40c6-b9ec-c9b9cc29e378"}
            ]
        }

+ Response 204 (application/json)

### DEPRECATED Remove SubGroups [POST /twirp/resonate.api.user.UserGroupService/RemoveSubGroups]

For labels to remove artists as subgroups.
For distributors to remove labels as subgroups.
user_groups array contain user groups' ids to remove.

+ Request (application/json)

        {
            "user_group_id": "b09cd642-9df8-4f44-bb5a-169829043110",
            "user_groups": [
                {"id": "b19cd642-9df8-4f44-bb5a-169829043110"},
                {"id": "b7b47086-3212-40c6-b9ec-c9b9cc29e378"}
            ]
        }

+ Response 204 (application/json)

### Add Members [POST /twirp/resonate.api.user.UserGroupService/AddMembers]

For artists to add user profiles (e.g. band members). You can define their roles within this artist using `tags` (with role as type) and set `display_name` (if not set it'll be the added user_group display_name).
For labels to add artists.
For distributors to add labels.

members array contains user groups to add.

+ Request (application/json)

        {
            "user_group_id": "b09cd642-9df8-4f44-bb5a-169829043110",
            "members": [
                {
                    "id": "c09cd642-9df8-4f44-bb5a-169829043110",
                    "display_name": "John Doe",
                    "tags": [
                        {
                          "type": "role",
                          "name": "guitarist"
                        },
                        {
                          "type": "role",
                          "name": "singer"
                        }
                    ]
                },
                {
                    "id": "c04cd642-9df8-4f44-bb5a-169829043110",
                    "display_name": "Jane Doe",
                    "tags": [
                        {
                          "type": "role",
                          "name": "bassist"
                        }
                    ]
                }

            ]
        }

+ Response 204 (application/json)

### Remove Members [POST /twirp/resonate.api.user.UserGroupService/AddMembers]

For artists to remove user profiles (e.g. band members).
For labels to remove artists.
For distributors to remove labels.

members array contains user groups to remove.

+ Request (application/json)

      {
          "user_group_id": "b09cd642-9df8-4f44-bb5a-169829043110",
          "members": [
              {
                "id": "b19cd642-9df8-4f44-bb5a-169829043110"
              },
              {
                "id": "b89cd642-9df8-4f44-bb5a-169829043110"
              }
          ]
      }

+ Response 204 (application/json)

## Tracks Collection [/twirp/resonate.api.user.Track]

### Add Tracks [POST /twirp/resonate.api.user.Track/AddTracks]

Upload tracks (track server) and create tracks.

+ Request (application/json)

        {
            "performers": [
                {
                    "id": "c09cd642-9df8-4f44-bb5a-169829043110"
                }
            ],
            "labels": [
                {
                    "id": "b7b47086-3212-40c6-b9ec-c9b9cc29e378"
                }
            ],
            "rights": [],
            "publish_date": "2015-08-05",
            "tags": [],
            "title": "Greatest track in the world",
            "status": "free",
            "cover": ""
        }

+ Response 201 (application/json)

        {
            "id": "b19cd642-9df8-4f44-bb5a-166529043110",
            "created_at": "2015-08-05T08:40:51.620Z",
            "updated_at": "2015-08-05T08:40:51.620Z",
            "performers": [
                {
                    "id": "c09cd642-9df8-4f44-bb5a-169829043110"
                }
            ],
            "labels": [
                {
                    "id": "b7b47086-3212-40c6-b9ec-c9b9cc29e378"
                }
            ],
            "rights": [],
            "publish_date": "2015-08-05",
            "audiofile": {
                "id": "c9b47086-3212-40c6-b9ec-c9b9cc29e378"
            },
            "tags": [],
            "title": "Greatest track in the world",
            "duration": "2m2s",
            "links": [],
            "status": "free",
            "cover": ""
        }

### Update Track [POST /twirp/resonate.api.user.Track/UpdateTrack]

+ Request (application/json)

        {
            "id": "b09cd642-9df8-4f44-bb5a-169829043110",
            "title": "Worst track in the world"
        }

+ Response 204 (application/json)

### Delete Track [POST /twirp/resonate.api.user.Track/DeleteTrack]

+ Request (application/json)

        {
            "id": "b09cd642-9df8-4f44-bb5a-169829043110"
        }

+ Response 204 (application/json)

### Get Tracks [POST /twirp/resonate.api.user.Track/GetTracks]

For a given user group

+ Request (application/json)

        {
            "user_group_id": "b09cd642-9df8-4f44-bb5a-169829043110"
        }

+ Response 200 (application/json)

        [
            {
                "id": "b19cd642-9df8-4f44-bb5a-166529043110",
                "created_at": "2015-08-05T08:40:51.620Z",
                "updated_at": "2015-08-05T08:40:51.620Z",
                "performers": [
                    {
                        "id": "c09cd642-9df8-4f44-bb5a-169829043110"
                    }
                ],
                "labels": [
                    {
                        "id": "b7b47086-3212-40c6-b9ec-c9b9cc29e378"
                    }
                ],
                "rights": [],
                "publish_date": "2015-08-05",
                "audiofile": {
                    "id": "c9b47086-3212-40c6-b9ec-c9b9cc29e378"
                },
                "tags": [],
                "title": "Greatest track in the world",
                "duration": "2m2s",
                "links": [],
                "status": "free",
                "cover": ""
            }
        ]

### Get Random Tracks [POST /twirp/resonate.api.user.Track/GetRandomTracks]

Respond with x (to be defined) random tracks.

+ Response 200 (application/json)

        [
            {
                "id": "b19cd642-9df8-4f44-bb5a-166529043110",
                "created_at": "2015-08-05T08:40:51.620Z",
                "updated_at": "2015-08-05T08:40:51.620Z",
                "performers": [
                    {
                        "id": "c09cd642-9df8-4f44-bb5a-169829043110"
                    }
                ],
                "labels": [
                    {
                        "id": "b7b47086-3212-40c6-b9ec-c9b9cc29e378"
                    }
                ],
                "rights": [],
                "publish_date": "2015-08-05",
                "audiofile": {
                    "id": "c9b47086-3212-40c6-b9ec-c9b9cc29e378"
                },
                "tags": [],
                "title": "Greatest track in the world",
                "duration": "2m2s",
                "links": [],
                "status": "free",
                "cover": ""
            }
        ]



## TrackGroups Collection [/twirp/resonate.api.user.TrackGroup]

### Create TrackGroup [POST /twirp/resonate.api.user.Track/CreateTrackGroup]

artist EP, LP, user playlist...

+ Request (application/json)

        {
            "creator_id": "b09cd642-9df8-4f44-bb5a-169829043110",
            "tracks": [
                "c09cd642-9df8-4f44-bb5a-169829043110",
                "a09cd642-9df8-4f44-bb5a-169829043110"
            ],
            "title": "Greatest Album",
            "publish_date": "2015-08-05"
        }

+ Response 200 (application/json)

        {
            "id": "a3ba2ecb-5594-4fc9-bf2d-f6c8bd21bd05"
            "created_at": "2015-08-05T08:40:51.620Z",
            "updated_at": "2015-08-05T08:40:51.620Z",
            "creator": [
                {
                    "id": "b09cd642-9df8-4f44-bb5a-169829043110"
                }
            ],
            "tracks": [
                {
                    "id": "c09cd642-9df8-4f44-bb5a-169829043110"
                },
                {
                    "id": "a09cd642-9df8-4f44-bb5a-169829043110"
                }
            ],
            "title": "Greatest Album",
            "publish_date": "2015-08-05"

        }

### Update TrackGroup [POST /twirp/resonate.api.user.Track/UpdateTrackGroup]

+ Request (application/json)

        {
            "title": "Worst Album"
        }

+ Response 204 (application/json)

### Add Track To TrackGroup [POST /twirp/resonate.api.user.Track/AddTrackToTrackGroup]

+ Request (application/json)

        {
            "track_id": "ad3f89f6-e7d8-4e10-9926-a32b6bff125d"
        }

+ Response 204 (application/json)

### Delete Track From TrackGroup [POST /twirp/resonate.api.user.Track/DeleteTrackFromTrackGroup]

+ Request (application/json)

        {
            "track_id": "ad3f89f6-e7d8-4e10-9926-a32b6bff125d"
        }

+ Response 204 (application/json)

### Delete TrackGroup [POST /twirp/resonate.api.user.Track/DeleteTrackGroup]

+ Request (application/json)

        {
            "id": "a3ba2ecb-5594-4fc9-bf2d-f6c8bd21bd05"
        }

+ Response 204 (application/json)

### Get TrackGroups [POST /twirp/resonate.api.user.Track/GetTrackGroups]

For a given user group

+ Request (application/json)

        {
            "user_group_id": "bd3f89f6-e7d8-4e10-9926-a32b6bff125d"
        }

+ Response 200 (application/json)

        [
        ]
